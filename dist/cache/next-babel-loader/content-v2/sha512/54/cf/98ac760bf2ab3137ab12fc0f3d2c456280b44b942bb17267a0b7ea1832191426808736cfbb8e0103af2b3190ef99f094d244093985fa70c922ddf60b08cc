{"ast":null,"code":"import * as yup from \"yup\";\nconst registrationSchema = yup.object().shape({\n  confirmpassword: yup.string().required().oneOf([yup.ref('password'), null], 'Le mot de passe de confirmation doit etre identique'),\n  password: yup.string().required('Entrez un mot de passe').matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/, \"Doit contenir 8 caractères, une majuscule, une minuscule, un chiffre et un caractère de cas particulier\"),\n  email: yup.string().email(\"Entrez une email valide \").required(\"l'email est requis\").matches(/^\\w+([-+.']\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*$/, \"entrez une email valide\").test('checkEmailUnique', 'Email existe deja.', async value => {\n    const res = await fetch(`http://localhost:5000/api/v1/services/auth/uniqueEmail/${value}`);\n    const resp = await res.json();\n    console.log(\"yup\", value);\n    return \"ok\";\n  }),\n  firstName: yup.string(),\n  lastName: yup.string(),\n  term: yup.boolean().oneOf([true], 'Acceptez les termes et conditions'),\n  userName: yup.string().required(\"Le nom d'utilisateur est requis\").min(6, \"Le nom d'utilisateur doit avoir minimum 6 characteres\").test('checkUsernameUnique', 'user existe deja.', async value => {\n    const res = await fetch(`http://localhost:5000/api/v1/services/auth/uniqueUserName/${value}`);\n    const resp = await res.json();\n    return !resp.data.used;\n  })\n});\nconst loginSchema = yup.object().shape({\n  password: yup.string().required('Entrez un mot de passe').matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/, \"Le mot de passe doit contenir 8 caractères, une majuscule, une minuscule, un chiffre et un caractère de cas particulier\"),\n  userName: yup.string().required(\"Le nom d'utilisateur est requis\").min(6, \"Le nom d'utilisateur doit avoir minimum 6 characteres\").test('checkUsernameUnique', 'user existe deja.', async value => {\n    const res = await fetch(`http://localhost:5000/api/v1/services/auth/uniqueUserName/${value}`);\n    const resp = await res.json();\n    return resp.data.used;\n  })\n});\nconst forgotPasswordSchema = yup.object().shape({\n  email: yup.string().email(\"Entrez une email valide \").required(\"l'email est requis\").matches(/^\\w+([-+.']\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*$/, \"entrez une email valide\").test('checkEmailUnique', 'Email existe deja.', async value => {\n    const res = await fetch(`http://localhost:5000/api/v1/services/auth/uniqueEmail/${value}`);\n    const resp = await res.json();\n    return resp.data.used;\n  })\n});\nconst resetPasswordSchema = yup.object().shape({\n  confirmpassword: yup.string().required(\"Confirmez le mot de passse\").oneOf([yup.ref('password'), null], 'Le mot de passe de confirmation doit etre identique'),\n  password: yup.string().required('Entrez un mot de passe').matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/, `Doit contenir 8 caractères, une majuscule,\n       une minuscule, un chiffre et un caractère de cas particulier`)\n});\nconst depotSchema = yup.object().shape({\n  wallet: yup.string().default('Wallet pricinpal'),\n  method: yup.string().default('Bitcoin'),\n  montant: yup.string(),\n  quantitebtc: yup.string(),\n  transactionPassword: yup.string()\n});\nconst retraitSchema = yup.object().shape({\n  montant: yup.string(),\n  portefeuille: yup.string(),\n  transactionPassword: yup.string(),\n  quantitebtc: yup.string()\n});\nexport { registrationSchema, depotSchema, loginSchema, retraitSchema, forgotPasswordSchema, resetPasswordSchema };","map":null,"metadata":{},"sourceType":"module"}