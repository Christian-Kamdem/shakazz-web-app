{"ast":null,"code":"import _regeneratorRuntime from \"/Users/apple/Documents/Projects/itguymax/shakazz/dev/shakaa-web-app-new-version/shakazz-web/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/apple/Documents/Projects/itguymax/shakazz/dev/shakaa-web-app-new-version/shakazz-web/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport * as yup from \"yup\";\nvar registrationSchema = yup.object().shape({\n  confirmpassword: yup.string().required().oneOf([yup.ref('password'), null], 'Le mot de passe de confirmation doit etre identique'),\n  password: yup.string().required('Entrez un mot de passe').matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/, \"Doit contenir 8 caractères, une majuscule, une minuscule, un chiffre et un caractère de cas particulier\"),\n  email: yup.string().email(\"Entrez une email valide \").required(\"l'email est requis\").matches(/^\\w+([-+.']\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*$/, \"entrez une email valide\").test('checkEmailUnique', 'Email existe deja.', /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(value) {\n      var res, resp;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return fetch(\"http://localhost:5000/api/v1/services/auth/uniqueEmail/\".concat(value));\n\n            case 2:\n              res = _context.sent;\n              _context.next = 5;\n              return res.json();\n\n            case 5:\n              resp = _context.sent;\n              console.log(\"yup\", value);\n              return _context.abrupt(\"return\", \"ok\");\n\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }()),\n  firstName: yup.string(),\n  lastName: yup.string(),\n  term: yup[\"boolean\"]().oneOf([true], 'Acceptez les termes et conditions'),\n  userName: yup.string().required(\"Le nom d'utilisateur est requis\").min(6, \"Le nom d'utilisateur doit avoir minimum 6 characteres\").test('checkUsernameUnique', 'user existe deja.', /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(value) {\n      var res, resp;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return fetch(\"http://localhost:5000/api/v1/services/auth/uniqueUserName/\".concat(value));\n\n            case 2:\n              res = _context2.sent;\n              _context2.next = 5;\n              return res.json();\n\n            case 5:\n              resp = _context2.sent;\n              return _context2.abrupt(\"return\", !resp.data.used);\n\n            case 7:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function (_x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }())\n});\nvar loginSchema = yup.object().shape({\n  password: yup.string().required('Entrez un mot de passe').matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/, \"Le mot de passe doit contenir 8 caractères, une majuscule, une minuscule, un chiffre et un caractère de cas particulier\"),\n  userName: yup.string().required(\"Le nom d'utilisateur est requis\").min(6, \"Le nom d'utilisateur doit avoir minimum 6 characteres\").test('checkUsernameUnique', 'user existe deja.', /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(value) {\n      var res, resp;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return fetch(\"http://localhost:5000/api/v1/services/auth/uniqueUserName/\".concat(value));\n\n            case 2:\n              res = _context3.sent;\n              _context3.next = 5;\n              return res.json();\n\n            case 5:\n              resp = _context3.sent;\n              return _context3.abrupt(\"return\", resp.data.used);\n\n            case 7:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function (_x3) {\n      return _ref3.apply(this, arguments);\n    };\n  }())\n});\nvar forgotPasswordSchema = yup.object().shape({\n  email: yup.string().email(\"Entrez une email valide \").required(\"l'email est requis\").matches(/^\\w+([-+.']\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*$/, \"entrez une email valide\").test('checkEmailUnique', 'Email existe deja.', /*#__PURE__*/function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(value) {\n      var res, resp;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return fetch(\"http://localhost:5000/api/v1/services/auth/uniqueEmail/\".concat(value));\n\n            case 2:\n              res = _context4.sent;\n              _context4.next = 5;\n              return res.json();\n\n            case 5:\n              resp = _context4.sent;\n              return _context4.abrupt(\"return\", resp.data.used);\n\n            case 7:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n\n    return function (_x4) {\n      return _ref4.apply(this, arguments);\n    };\n  }())\n});\nvar resetPasswordSchema = yup.object().shape({\n  confirmpassword: yup.string().required(\"Confirmez le mot de passse\").oneOf([yup.ref('password'), null], 'Le mot de passe de confirmation doit etre identique'),\n  password: yup.string().required('Entrez un mot de passe').matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/, \"Doit contenir 8 caract\\xE8res, une majuscule,\\n       une minuscule, un chiffre et un caract\\xE8re de cas particulier\")\n});\nvar depotSchema = yup.object().shape({\n  wallet: yup.string()[\"default\"]('Wallet pricinpal'),\n  method: yup.string()[\"default\"]('Bitcoin'),\n  montant: yup.string(),\n  quantitebtc: yup.string(),\n  transactionPassword: yup.string()\n});\nvar retraitSchema = yup.object().shape({\n  montant: yup.string(),\n  portefeuille: yup.string(),\n  transactionPassword: yup.string(),\n  quantitebtc: yup.string()\n});\nexport { registrationSchema, depotSchema, loginSchema, retraitSchema, forgotPasswordSchema, resetPasswordSchema };","map":null,"metadata":{},"sourceType":"module"}